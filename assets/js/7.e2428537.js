(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{352:function(t,a,s){"use strict";s.r(a);var n=s(42),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"concepts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concepts"}},[t._v("#")]),t._v(" Concepts")]),t._v(" "),s("h2",{attrs:{id:"transformer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transformer"}},[t._v("#")]),t._v(" Transformer")]),t._v(" "),s("h2",{attrs:{id:"json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[t._v("#")]),t._v(" Json")]),t._v(" "),s("p",[t._v("To manipulate Json, Streamy proposes its own Json AST because Json is the base of everything in Streamy.")]),t._v(" "),s("h3",{attrs:{id:"json-ast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json-ast"}},[t._v("#")]),t._v(" Json AST")]),t._v(" "),s("p",[t._v("The base type in Streamy is MaybeJson, and has several subtypes representing different Json types :")]),t._v(" "),s("ul",[s("li",[t._v("JsUndefined : An undefined Json value. It is useful to avoid Option[Json]  pattern in some case and for performance reason.")]),t._v(" "),s("li",[t._v("JsDefined : A defined Json value.\n"),s("ul",[s("li",[t._v("JsObject : A Json object, represented as a Map.")]),t._v(" "),s("li",[t._v("JsArray : A Json array, represented as an Array.")]),t._v(" "),s("li",[t._v("JsString : A Json String.")]),t._v(" "),s("li",[t._v("JsBoolean: A Json Boolean.")]),t._v(" "),s("li",[t._v("JsNull: A Json Null.")]),t._v(" "),s("li",[t._v("JsBytes : A Json Bytes.")]),t._v(" "),s("li",[t._v("JsNumber : A Json number, represented has several subtypes.\n"),s("ul",[s("li",[t._v("JsInt : A Json Int.")]),t._v(" "),s("li",[t._v("JsLong : A Json Long.")]),t._v(" "),s("li",[t._v("JsFloat : A Json Float.")]),t._v(" "),s("li",[t._v("JsDouble: A Json Double.")]),t._v(" "),s("li",[t._v("JsBigDecimal: A Json Big Decimal.")])])])])])]),t._v(" "),s("h3",{attrs:{id:"reading-and-writing-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reading-and-writing-json"}},[t._v("#")]),t._v(" Reading and writing json")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("io.techcode.streamy.util.json._")]),t._v("  package has several methods for reading and writing json.")]),t._v(" "),s("h4",{attrs:{id:"reading-from-bytestring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-bytestring"}},[t._v("#")]),t._v(" Reading from ByteString")]),t._v(" "),s("p",[t._v("Parse a ByteString input into a Json value and will throw a ParseException in case of failure.")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Json "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parseByteStringUnsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ByteString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n{\n  "foo": "bar"\n}\n"""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Parse a ByteString input into a Json value and will return an Either[Throwable, Json] value.")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Either"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Throwable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parseByteString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ByteString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n{\n  "foo": "bar"\n}\n"""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"reading-from-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-string"}},[t._v("#")]),t._v(" Reading from String")]),t._v(" "),s("p",[t._v("Parse a String input into a Json value and will throw a ParseException in case of failure.")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Json "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parseStringUnsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n{\n  "foo": "bar"\n}\n"""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Parse a ByteString input into a Json value and will return an Either[Throwable, Json] value.")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Either"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Throwable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parseString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n{\n  "foo": "bar"\n}\n"""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"reading-from-bytes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-bytes"}},[t._v("#")]),t._v(" Reading from Bytes")]),t._v(" "),s("p",[t._v("Parse an Array[Byte] input into a Json value and will throw a ParseException in case of failure.")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Json "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parseBytesUnsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n{\n  "foo": "bar"\n}\n"""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getBytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Parse a ByteString input into a Json value and will return an Either[Throwable, Json] value.")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Either"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Throwable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parseBytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n{\n  "foo": "bar"\n}\n"""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getBytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"writing-to-bytestring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writing-to-bytestring"}},[t._v("#")]),t._v(" Writing to ByteString")]),t._v(" "),s("p",[t._v("Print a Json input into a ByteString value and will throw a PrintException in case of failure.")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ByteString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("printByteStringUnsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Print a Json input into a ByteString and will return aEither[Throwable, ByteString] value.")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Either"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Throwable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ByteString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("printByteString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"writing-to-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writing-to-string"}},[t._v("#")]),t._v(" Writing to String")]),t._v(" "),s("p",[t._v("Print a Json input into a String value and will throw a PrintException in case of failure.")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("printStringUnsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Print a Json input into a String and will return aEither[Throwable, String] value.")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Either"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Throwable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("printString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"manipulating-json-ast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#manipulating-json-ast"}},[t._v("#")]),t._v(" Manipulating Json AST")]),t._v(" "),s("h4",{attrs:{id:"evaluatea"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluatea"}},[t._v("#")]),t._v(" Evaluatea")]),t._v(" "),s("h4",{attrs:{id:"patch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#patch"}},[t._v("#")]),t._v(" Patch")]),t._v(" "),s("h2",{attrs:{id:"parser"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parser"}},[t._v("#")]),t._v(" Parser")]),t._v(" "),s("h2",{attrs:{id:"printer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#printer"}},[t._v("#")]),t._v(" Printer")])])}),[],!1,null,null,null);a.default=r.exports}}]);